Initial directory structure:
==================================
README.md
├── angular.json
├── karma.conf.js
├── package-lock.json
├── package.json
├── src
│   ├── app
│   │   ├── app-routing.module.ts
│   │   ├── app.component.html
│   │   ├── app.component.scss
│   │   ├── app.component.spec.ts
│   │   ├── app.component.ts
│   │   └── app.module.ts
│   ├── assets
│   ├── environments
│   │   ├── environment.prod.ts
│   │   └── environment.ts
│   ├── favicon.ico
│   ├── index.html
│   ├── main.ts
│   ├── polyfills.ts
│   ├── styles.scss
│   └── test.ts
├── tsconfig.app.json
├── tsconfig.json
└── tsconfig.spec.json
==================================

app/app.module.ts > where to declare usage of external modules

@NgModule => decorator (function that modifies a class/property definition) which takes a meta-data object as input.
Angular defines decorators that attach metadata to classes or properties so that it knows how these should work (see https://angular.io/guide/glossary#decorator)
Decorator pattern extends classes functionality at runtime, that's why it exists alongside subclassing (see https://stackoverflow.com/questions/4842978/decorator-pattern-versus-sub-classing)

>Meta data object has:
>>-declarations: make directives [in angular, a directive is a class that can modify attributes & structure of the DOM]
(such as components & pipes) from the current module available to other directives in the current module;
selectors of directives are only matched against HTML if they are declared or imported.
>>-imports: makes exported declarations of other modules available in current module.
Some imports might have .forRoot() called in them. This is usually done to attach them to a singleton. See: .forRoot register service in router singleton. See https://angular.io/guide/singleton-services#the-forroot-pattern
>>-providers: external providers of dependencies to be injected (usually services)
>>-bootstrap: root component that angular creates & inserts into index.html

See (https://angular.io/guide/bootstrapping) for a more detailed explanation.

>Components

Generate component with $ng g c <component-name>

Components are usually standalone units of visual & logic. Add new components to main app by copypasting the 'selector'.
In case a model variable is used in a template but this gives a 'property has no initializer' error, TypeScript is probably using
strict class initialization (https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#strict-class-initialization).
Create an initializer method to solve this.

Components can be auto generated in the command line with `$ng g c <component-name>` .
This will create:
-An HTML template file 
-A SASS specific for the component
-A component class file
-A component spec file to test the class

All relevant links between these files will also be done.

>Services 

Generate services with $ng g s <service-name>.
This will generate the service TS file + spec file. The service will also get injected into the app this way.
Services are generally means to fetch some data; they do not store data by itself, but act as a channel on it.

>> Interceptors
This is a special kind of service which will intercept something (usually an HTTP request) and perform operations on it 
before resuming (or altering) its course. Interceptor can implement the HttpInterceptor implement, and the interceptor shall call the 
locally implemented intercept() method on the request. This can be used to do stuff such as logging, error handling, authentication, etc.
The interceptor method accepts two params: the request (the object which will be processed) and the handler (what to do after processing),
and will return an Observable.
Read here for more details: https://ultimatecourses.com/blog/intro-to-angular-http-interceptors .
Interceptors are imported as service providers (in the 'providers:' att of NgModule decorator) inside modules.
Multi providers can allow for different providers in different contexts. See: https://blog.thoughtram.io/angular2/2015/11/23/multi-providers-in-angular-2.html


>Interfaces

This is a Typescript feature which basically translates to 'a contract for an object'.
Remember that JS objects are basically dictionaries. The interface will declare which fields
and types 'object' might have. Here's a more detailed explanation: https://www.typescriptlang.org/docs/handbook/2/objects.html .

>Models

It is good practice to declare models for objects which will be used throughout the app. 
The official recommendation by the Angular team is to use bare ES6 classes with strongly typed instance
variables for services or declarables (components, directives and pipes) and interfaces for data models.
For instance, this model:

interface ParentPlatform {
    platform: {
        name: string;
        slug: string;
    }
}

Called here:

<img
    *ngFor="let gamePlatform of game.parent_platforms"
    class="game-platform"
    src="assets/images/platform-icons/{{ gamePlatform.platform.slug }}.svg"
    alt="{{ gamePlatform.platform.slug }}"
/>

Will throw an error if the 'slug' attribute is not defined, as it is a breach of interface contract.

If a model shall be used by different files, it is recommended to put it inside a 'shared' folder. See the angular style guide for more: https://angular.io/guide/styleguide
